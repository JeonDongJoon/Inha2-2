package porfile;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.sql.PreparedStatement;

public class ProfileDAO {
	
	private Connection conn;

	private ResultSet rs;



	public ProfileDAO() {

		try {

			String dbURL = "jdbc:mysql://localhost:3306/expertChat";

			String dbID = "root";

			String dbPassword = "wjs0912";

			Class.forName("com.mysql.jdbc.Driver");

			conn = DriverManager.getConnection(dbURL, dbID, dbPassword);

		} catch (Exception e) {

			e.printStackTrace();

		}

	}
	
	public int getNext() {
		//현재 게시글을 내림차순으로 조회하여 가장 마지막 글의 번호를 구한다
		String sql = "select bbsID from profile order by profileID desc";
		try {
			PreparedStatement pstmt = conn.prepareStatement(sql);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				return rs.getInt(1) + 1;
			}
			return 1; //첫 번째 게시물인 경우
		}catch (Exception e) {
			e.printStackTrace();
		}
		return -1; //데이터베이스 오류
	}
	
	public int write(String profileTitle, String userID, String profileContent, String userName, String profilePrice) {
		String SQL = "INSERT INTO profile VALUES(?, ?, ?, ?, ?, ?, ?)";
		try {
			PreparedStatement pstmt = conn.prepareStatement(SQL);
			pstmt.setInt(1, getNext());
			pstmt.setString(2, profileTitle);
			pstmt.setString(3, userID);
			pstmt.setString(4, profileContent);
			pstmt.setString(5, profilePrice);
			pstmt.setString(6, userName);
			pstmt.setInt(7, 1);
			return pstmt.executeUpdate();
		}catch(Exception e) {
			e.printStackTrace();
		}
		return -1; 
	}
	
	public ArrayList<ProfileDTO> getList(int pageNumber){
		String sql = "select * from profile where profileID < ? and profileAvailable = 1 order by profileID desc limit 10";
		ArrayList<ProfileDTO> list = new ArrayList<ProfileDTO>();
		try {
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, getNext() - (pageNumber - 1) * 10);
			rs = pstmt.executeQuery();
			while(rs.next()) {
				ProfileDTO profileDTO = new ProfileDTO();
				profileDTO.setProfileID(rs.getInt(1));
				profileDTO.setProfileTitle(rs.getString(2));
				profileDTO.setUserID(rs.getString(3));
				profileDTO.setProfileContent(rs.getString(4));
				profileDTO.setProfilePrice(rs.getString(5));
				profileDTO.setUserName(rs.getString(6));
				profileDTO.setProfileAvailable(rs.getInt(7));
				list.add(profileDTO);
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return list;
	}
	
	public boolean nextPage(int pageNumber) {
		String sql = "select * from profile where profileID < ? and profileAvailable = 1";
		try {
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, getNext() - (pageNumber - 1) * 10);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				return true;
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}
	
	public ProfileDAO getProfileDTO(int profileID) {
		String sql = "select * from profile where profileID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, profileID);
			rs = pstmt.executeQuery();
			if(rs.next()) {
				ProfileDTO profileDTO = new ProfileDTO();
				profileDTO.setProfileID(rs.getInt(1));
				profileDTO.setProfileTitle(rs.getString(2));
				profileDTO.setUserID(rs.getString(3));
				profileDTO.setProfileContent(rs.getString(4));
				profileDTO.setProfilePrice(rs.getString(5));
				profileDTO.setUserName(rs.getString(6));
				profileDTO.setProfileAvailable(rs.getInt(7));
				return ProfileDAO;
			}
		}catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}
	
	//게시글 수정 메소드
	public int update(int bbsID, String bbsTitle, String bbsContent) {
		String sql = "update bbs set bbsTitle = ?, bbsContent = ? where bbsID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setString(1, bbsTitle);
			pstmt.setString(2, bbsContent);
			pstmt.setInt(3, bbsID);
			return pstmt.executeUpdate();
		}catch (Exception e) {
			e.printStackTrace();
		}
		return -1; //데이터베이스 오류
	}
	
	//게시글 삭제 메소드
	public int delete(int bbsID) {
		//실제 데이터를 삭제하는 것이 아니라 게시글 유효숫자를 '0'으로 수정한다
		String sql = "update bbs set bbsAvailable = 0 where bbsID = ?";
		try {
			PreparedStatement pstmt = conn.prepareStatement(sql);
			pstmt.setInt(1, bbsID);
			return pstmt.executeUpdate();
		}catch (Exception e) {
			e.printStackTrace();
		}
		return -1; //데이터베이스 오류 
	
}
